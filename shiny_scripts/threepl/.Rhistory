pander(dat)
Question <- paste("Q", 1:10, sep = "")
dat <- data.frame(Question, Difficulty)
rownames(dat) <- NULL
pander(dat)
Total <- rowSums(resp)
Total
cor.test(Question, Total)
cor(Question, Total)
cor(resp, Total)
pt_biser <- cor(resp, Total)
rownames(pt_biser) <- paste("Q", 1:10, sep = "")
head(pt_biser)
colname(pt_biser) <- "Point-Biserial Correlations"
colnames(pt_biser) <- "Point-Biserial Correlations"
pander(pt_biser)
Diffculty
Difficulty
t(Difficulty)
clear
install.packages("psych")
library("psych")
pretest_scores <- read.csv("Dropbox/hr/E-411-PRMA_2015-1/pretest/pretest_scores.csv", header = T)
pretest_scores <- na.omit(pretest_scores)
pretest <- apply(pretest_scores, 2, as.ordered)
pretest <- as.data.frame(pretest)
table(pretest$q1)
plot(pretest$q1)
pre_cor <- polychoric(pretest_scores)
pre_cor
str(pre_cor)
pre_cor$rho
which.max(pre_cor$rho)
diag(pre_cor$rho)
str(pre_cor$rho)
pre_cor$rho[pre_cor == 1]
cor_mat <- pre_cor$rho
str(cor_matr)
str(cor_mat)
cor_mat <- as.data.frame(cor_matr)
cor_mat <- as.data.frame(cor_mat)
head(cor_mat)
cor_mat[cor_mat == `]
cor_mat[cor_mat == `]
cor_mat[cor_mat == 1]
cor_mat[cor_mat == "1"]
cor_mat[cor_mat == 0]
cor_mat[cor_mat == 1]
cor_mat[cor_mat == 1] <- NA
cor_mat
which.max(cor_mat)
which.max(cor_mat, na.rm = T)
?which.max
str(cor_mat)
which.max(cor_mat)
max(cor_mat)
apply(cor_mat,2,max)
apply(cor_mat,2,max,na.rm = T)
max(apply(cor_mat,2,max,na.rm = T))
cor_mat[cor_mat$18 ==0.5400316,]
cor_mat[cor_mat$18 == 0.5400316,]
cor_mat[cor_mat == 0.5400316,]
?cor_mat
str(cor_mat)
cor_mat$q18
whic(cor_mat$q18 == 0.5400316)
which(cor_mat$q18 == 0.5400316)
apply(cor_mat,2,max,na.rm = T)
cor_mat[cor_mat == 0.5400316,]
max(apply(cor_mat,2,max,na.rm = T))
apply(cor_mat,2,max,na.rm = T)
cor$mat$q18
cor_mat$q18
cor_mat[cor_mat == 0.54003158,]
which(cor_mat == 0.54003158)
with(df, d[v== max(v[c=="foo"])])
library(plyr)
ddply(cor_mat, "q18", subset, v==max(q18))
ddply(cor_mat, "q18", subset, q18==max(q18))
apply(cor_mat,2,max,na.rm = T)
sort(apply(cor_mat,2,max,na.rm = T), ascending = F)
sort(apply(cor_mat,2,max,na.rm = T), descending = T)
?sort
sort(apply(cor_mat,2,max,na.rm = T), decreasing = T)
cbind(paste("Q", 1:27), cor_mat$q18)
sort(apply(cor_mat,2,min,na.rm = T), decreasing = T)  # q18 and q11
sort(apply(cor_mat,2,min,na.rm = T), decreasing = F)  # q18 and q11
cor_mst
cor_mat
pre_cor <- polychoric(pretest_scores)
cor_mat <- pre_cor$rho
cor_mat
pre_cor$rho
str(cor_mat)
min(cor_mat)
max(cor_mat)
which.min(cor_mat)
cor_mat[283]
cor_mat
length_cor_mat)
length(cor_mat)
for(i in 1:729)
{
if(cor_mat[i] < 0){
cor_mat[i] <- cor_mat[i] * -1
}
}
min(cor_mat)
which.min(cor_mat)
395/27
395 % 27
395 %% 27
cor_mat[14, 17]
cor_mat[17, 14]
head(cor_mat)
cor_mat[2]
cor_mat[3]
cor_mat[27]
which.min(cor_mat)
395 / 27
cor_mat[14,]
cor_mat <- as.data.frame(cor_mat)
which.min(cor_mat)  # 395
apply(cor_mat,2,min,na.rm = T)
sort(apply(cor_mat,2,min,na.rm = T))
395 %% 27
cor_mat[15,17]
alpha(pre_cor$rho)
## Calculate total test score
total_test <- rowSums(pretest_scores)
# Correlations with total test score
item_test_cor <- NULL
for(i in 1:27){
item_test_cor[i] <- cor.test(pretest_scores[,i], total_test,
method = "spearman")$estimate
}
test_cors <- as.data.frame(cbind(paste("q",1:27, sep = ""),item_test_cor))
colnames(test_cors) <- c("Question", "Correlations")
test_cors
factanal(pretest_scores[,1:10], factors = 1)
5 + 4.5 + 1 + 2 + 3 + 2
2 + 4 + 3 + 1 + 5 + 5
17.5/20
plot(prescore$q12)
plot(pretest_scores$q12)
hist(pretest_scores$q12)
plot(pretest_scores$q27)
hist(pretest_scores$q27)
hist(pretest_scores$q12)
2 + 2 + 2 + 1 + 4 + 2.5
13.5/20
19/20
19.5/20
9.5 + 6 + 2
17.5/20
19/20
19.5/20
sort(apply(cor_mat,2,max,na.rm = T), decreasing = T)  # q18 and q11
pre_cor <- polychoric(pretest_scores)
cor_mat <- pre_cor$rho
cor_mat <- as.data.frame(cor_mat)
cor_mat[cor_mat == 1] <- NA
sort(apply(cor_mat,2,max,na.rm = T), decreasing = T)  # q18 and q11
sort(apply(cor_mat,2,min,na.rm = T), decreasing = F)  # q11 and q13
17.5/20
18.5/20
20 - 3.5
16.5/20
17.5/20
18.5/20
3 + 1.75 + 4 + 1 + 3.5
13.25/20
5 + 3 + 0.5 + 2.5 + 3 + 2
16/20
18.5/20
17.5/20
18.5/20
17/20
3.5 + 3 + 1 + 1.5 + 3 + 2
14/20
15.5/20
4.5 + 4.5 + 1 + 1.5 + 3 + 2
16.5/20
2.5 + 3.5 + 0.5 + 2.5 + 2 + 3
14/20
s <- seq(-4,4, by = .1)
s <- seq(-4,4, by = .1)
3pl <- function(g, s){
x <- g + (1 - g)*(exp(1 * (s - 1))/(1 + exp(1 * (s - 1))))
return(x)
s <- seq(-4,4, by = .1)
3pl <- function(g, s){
three_pl <- function(g, s){
x <- g + (1 - g)*(exp(1 * (s - 1))/(1 + exp(1 * (s - 1))))
return(x)
}
three_pl(0,s)
guess.0 <- three_pl(0,s)
guess.25 <- three_pl(.25,s)
guess.50 <- three_pl(.5,s)
guess.75 <- three_pl(.75,s)
plot(guess.0 ~ s)
plot(guess.0 ~ s, type = "l")
library(ggplot)
library(ggplot2)
qplot(y = guess.0, x = s, geom = "line")
qplot(y = guess.0, x = s, geom = "line") + geom_line(aes(y = guess.25))
three_pl <- function(g, s){
x <- g + (1 - g)*(exp(1 * (s - 0))/(1 + exp(1 * (s - 0))))
return(x)
}
guess.0 <- three_pl(0,s)
guess.25 <- three_pl(.25,s)
guess.50 <- three_pl(.5,s)
guess.75 <- three_pl(.75,s)
qplot(y = guess.0, x = s, geom = "line") + geom_line(aes(y = guess.25))
length(guess.0)
rep(c("0", "0.25", "0.50", "0.75"), each = 81)
ids <- rep(c("0", "0.25", "0.50", "0.75"), each = 81)
out <- c(guess.0, guess.25, guess.50, guess.75)
dat <- data.frame(ids, out)
dat <- data.frame(ids, out, s)
dat
qplot(y = out, x = s, color = "ids", group = "ids", geom = "line")
qplot(y = out, x = s, color = "ids", group = "ids", geom = "line", data = dat)
qplot(y = out, x = s, color = "ids", group = "ids", data = dat)
qplot(y = out, x = s, color = "ids", group = "ids", data = dat) + geom_line()
qplot(y = out, x = s, color = "ids", group = ids, data = dat) + geom_line()
qplot(y = out, x = s, color = ids, group = ids, data = dat) + geom_line()
qplot(y = out, x = s, color = ids, group = ids, data = dat) + facet_wrap(~ids)
qplot(y = out, x = s, color = ids, group = ids, data = dat) + geom_line() + facet_wrap(~ids)
qplot(y = out, x = s, color = ids, group = ids, data = dat, geom = "line")
qplot(y = out, x = s, color = ids, group = ids, data = dat, geom = "line")  + facet_wrap(~ids)
qplot(y = out, x = s, color = ids, group = ids, data = dat, geom = "line") + xlab("Ability Score") + ylab("Probability of Answering Item Correctly")
Guess <- rep(c("0", "0.25", "0.50", "0.75"), each = 81)
out <- c(guess.0, guess.25, guess.50, guess.75)
dat <- data.frame(Guess, out, s)
qplot(y = out, x = s, color = ids, group = ids, data = dat, geom = "line") + xlab("Ability Score") + ylab("Probability of Answering Item Correctly")
qplot(y = out, x = s, color = Guess, group = Guess, data = dat, geom = "line") + xlab("Ability Score") + ylab("Probability of Answering Item Correctly")
qplot(y = out, x = s, color = Guess, group = Guess, data = dat, geom = "line") + xlab("Ability Score") + ylab("Probability of Answering Item Correctly") + theme(legend.position="bottom")
c <- seq(0,1 by = .1)
threepl <- function(person, b, a, c) {
C + (C - 1)*exp(a*(person - b))/(1 + exp(a*(person - b)))
}
persons <- seq(-3, 3, by = .1)
b <- -3:3
a <- -3:3
C <- seq(0, 1 by = .1)
C <- seq(0, 1, by = .1)
data_full <- NULL
for(k in 1:length(c)){
data_c <- NULL
for(i in 1:length(b)){
data_a <- NULL
for(j in 1:length(a)){
tmp <- threepl(persons, b[i], a[j], c[k])
id <- paste(i, j, k, sep = "-")
data <- cbind(tmp,id)
data_a <- rbind(data_a, data)
}
data_c <- rbind(data_c, data_a)
}
data_full <- rbind(data_full, data_c)
}
warnings()
threepl <- function(person, b, a, c) {
C + (C - 1)*(exp(a*(person - b))/(1 + exp(a*(person - b))))
}
persons <- seq(-3, 3, by = .1)
b <- -3:3
a <- -3:3
C <- seq(0, 1, by = .1)
data_full <- NULL
for(k in 1:length(c)){
data_c <- NULL
for(i in 1:length(b)){
data_a <- NULL
for(j in 1:length(a)){
tmp <- threepl(persons, b[i], a[j], c[k])
id <- paste(i, j, k, sep = "-")
data <- cbind(tmp,id)
data_a <- rbind(data_a, data)
}
data_c <- rbind(data_c, data_a)
}
data_full <- rbind(data_full, data_c)
}
warnings()
tmp
c
data_full <- NULL
for(k in 1:length(C)){
data_c <- NULL
for(i in 1:length(b)){
data_a <- NULL
for(j in 1:length(a)){
tmp <- threepl(persons, b[i], a[j], c[k])
id <- paste(i, j, k, sep = "-")
data <- cbind(tmp,id)
data_a <- rbind(data_a, data)
}
data_c <- rbind(data_c, data_a)
}
data_full <- rbind(data_full, data_c)
}
x <- NULL
C
length(C)
k
tmp
b
i
j
b[7]
b[j]
data_a <- NULL
for(j in 1:length(a)){
tmp <- threepl(persons, b[i], a[j], c[k])
id <- paste(i, j, k, sep = "-")
data <- cbind(tmp,id)
data_a <- rbind(data_a, data)
}
warnings()
data_a
data
tmp
threepl(person, 3, 3, 1)
threepl(persons, 3, 3, 1)
threepl <- function(person, b, a, c) {
x <- c + (1 - c)*(exp(a * (person - b))/(1 + exp(a * (person - b))))
return(x)
}
threepl(person, 3, 3, 1)
threepl(persons, 3, 3, 1)
for(j in 1:length(a)){
tmp <- threepl(persons, b[i], a[j], c[k])
id <- paste(i, j, k, sep = "-")
data <- cbind(tmp,id)
data_a <- rbind(data_a, data)
}
for(j in 1:length(a)){
tmp <- threepl(persons, b[i], a[j], C[k])
id <- paste(i, j, k, sep = "-")
data <- cbind(tmp,id)
data_a <- rbind(data_a, data)
}
data_a
persons <- seq(-3, 3, by = .1)
b <- -3:3
a <- -3:3
C <- seq(0, 1, by = .25)
data_full <- NULL
for(k in 1:length(C)){
data_c <- NULL
for(i in 1:length(b)){
data_a <- NULL
for(j in 1:length(a)){
tmp <- threepl(persons, b[i], a[j], C[k])
id <- paste(i, j, k, sep = "-")
data <- cbind(tmp,id)
data_a <- rbind(data_a, data)
}
data_c <- rbind(data_c, data_a)
}
data_full <- rbind(data_full, data_c)
}
head(data_full)
threepl(persons, -3, -3, 0)
data_full <- NULL
for(k in 1:length(C)){
data_c <- NULL
for(i in 1:length(b)){
data_a <- NULL
for(j in 1:length(a)){
tmp <- threepl(persons, b[i], a[j], C[k])
id <- paste(i, j, k, sep = "-")
data <- cbind(tmp,id)
data_a <- rbind(data_a, data)
}
data_c <- rbind(data_c, data_a)
}
data_full <- rbind(data_full, data_c)
}
library("shiny")
install.packages("Shiny")
install.packages("shiny")
library("shiny")
getwd()
setwd("Dropbox/Presentations/unak/unak_shiny/threepl/")
runApp()
runApp()
runApp()
head(data_full)
input <- data.frame(diff = -3, disc = -3, guess = 0)
data_full[,paste(input$diff, input$disc, input$guess, sep = "-")]
paste(input$diff, input$disc, input$guess, sep = "-")
data_full <- NULL
for(k in 1:length(C)){
data_c <- NULL
for(i in 1:length(b)){
data_a <- NULL
for(j in 1:length(a)){
tmp <- threepl(persons, b[i], a[j], C[k])
id <- paste(b[i], a[j], C[k], sep = "_")
data <- cbind(tmp,id)
data_a <- rbind(data_a, data)
}
data_c <- rbind(data_c, data_a)
}
data_full <- rbind(data_full, data_c)
}
input <- data.frame(diff = -3, disc = -3, guess = 0)
paste(input$diff, input$disc, input$guess, sep = "_")
data_full[,paste(input$diff, input$disc, input$guess, sep = "_")]
id_sub <- paste(input$diff, input$disc, input$guess, sep = "_")
str(data_full)
data_full <- as.data.frame(data_full)
head(data_full)
data_full$persons <- persons
head(data_full)
data_tmp <- subset(data_full, id == id_sub)
head(data_tmp)
id_sub
runApp()
qplot(y = data_tmp, x = persons, geom = "line") + ylab("Probability of Getting Item Correct") + xlab("Person Ability") + coord_cartesian(ylim = c(0, 1), xlim = c(-3, 3)) + geom_vline(xintercept = as.numeric(input$diff), colour = "red", linetype = "longdash")
qplot(y = tmp, x = persons, geom = "line", data_tmp) + ylab("Probability of Getting Item Correct") + xlab("Person Ability") + coord_cartesian(ylim = c(0, 1), xlim = c(-3, 3)) + geom_vline(xintercept = as.numeric(input$diff), colour = "red", linetype = "longdash")
data_tmp
runApp()
input <- data.frame(diff = 0, disc = 1, guess = 0)
id_sub <- paste(input$diff, input$disc, input$guess, sep = "_")
data_tmp <- subset(data_full, id == id_sub)
qplot(y = tmp, x = persons, geom = "line", data_tmp) + ylab("Probability of Getting Item Correct") + xlab("Person Ability") + coord_cartesian(ylim = c(0, 1), xlim = c(-3, 3)) + geom_vline(xintercept = as.numeric(input$diff), colour = "red", linetype = "longdash")
data_tmp
data_tmp$tmp
data_full$est <- as.numeric(as.character(data_full$tmp))
head(data_full)
id_sub <- paste(input$diff, input$disc, input$guess, sep = "_")
data_tmp <- subset(data_full, id == id_sub)
qplot(y = est, x = persons, geom = "line", data_tmp) + ylab("Probability of Getting Item Correct") + xlab("Person Ability") + coord_cartesian(ylim = c(0, 1), xlim = c(-3, 3)) + geom_vline(xintercept = as.numeric(input$diff), colour = "red", linetype = "longdash")
head(data_full)
id_sub <- paste(input$diff, input$disc, input$guess, sep = "_")
data_tmp <- subset(data_full, id == id_sub)
head(data_tmp)
qplot(y = est, x = persons, geom = "line", data_tmp) + ylab("Probability of Getting Item Correct") + xlab("Person Ability") + coord_cartesian(ylim = c(0, 1), xlim = c(-3, 3)) + geom_vline(xintercept = as.numeric(input$diff), colour = "red", linetype = "longdash")
data_full$estimate <- as.numeric(as.character(data_full$tmp))
data_full$persons <- persons
head(data_full)
input <- data.frame(diff = 0, disc = 1, guess = 0)
id_sub <- paste(input$diff, input$disc, input$guess, sep = "_")
data_tmp <- subset(data_full, id == id_sub)
qplot(y = estimate, x = persons, geom = "line", data_tmp) + ylab("Probability of Getting Item Correct") + xlab("Person Ability") + coord_cartesian(ylim = c(0, 1), xlim = c(-3, 3)) + geom_vline(xintercept = as.numeric(input$diff), colour = "red", linetype = "longdash")
head(data_tmp)
qplot(y = estimate, x = persons, geom = "line", data_tmp)
qplot(y = data_tmp$estimate, x = persons, geom = "line", data_tmp)
qplot(y = estimate, x = persons, geom = "line", data = data_tmp)
qplot(y = estimate, x = persons, geom = "line", data = data_tmp) + ylab("Probability of Getting Item Correct") + xlab("Person Ability") + coord_cartesian(ylim = c(0, 1), xlim = c(-3, 3)) + geom_vline(xintercept = as.numeric(input$diff), colour = "red", linetype = "longdash")
runApp()
#server.r
threepl <- function(person, b, a, c) {
x <- c + (1 - c)*(exp(a * (person - b))/(1 + exp(a * (person - b))))
return(x)
}
persons <- seq(-3, 3, by = .1)
b <- -3:3
a <- -3:3
C <- seq(0, 1, by = .25)
data_full <- NULL
for(k in 1:length(C)){
data_c <- NULL
for(i in 1:length(b)){
data_a <- NULL
for(j in 1:length(a)){
tmp <- threepl(persons, b[i], a[j], C[k])
id <- paste(b[i], a[j], C[k], sep = "_")
data <- cbind(tmp,id)
data_a <- rbind(data_a, data)
}
data_c <- rbind(data_c, data_a)
}
data_full <- rbind(data_full, data_c)
}
data_full <- as.data.frame(data_full)
data_full$estimate <- as.numeric(as.character(data_full$tmp))
data_full$persons <- persons
head(data_full)
input <- data.frame(diff = 0, disc = 1, guess = 0)
runApp()
input <- data.frame(diff = 0, disc = 1, guess = 1)
id_sub <- paste(input$diff, input$disc, input$guess, sep = "_")
id_sub
data_tmp <- subset(data_full, id == id_sub)
data_tmp
qplot(y = estimate, x = persons, geom = "line", data = data_tmp) + ylab("Probability of Getting Item Correct") + xlab("Person Ability") + coord_cartesian(ylim = c(0, 1), xlim = c(-3, 3)) + geom_vline(xintercept = as.numeric(input$diff), colour = "red", linetype = "longdash")
qplot(y = estimate, x = persons, geom = "line", data = data_tmp, color = I("blue")) + ylab("Probability of Getting Item Correct") + xlab("Person Ability") + coord_cartesian(ylim = c(0, 1), xlim = c(-3, 3)) + geom_vline(xintercept = as.numeric(input$diff), colour = "red", linetype = "longdash")
runApp("../twopl/")
C <- seq(0, 1, by = .25)
C
runApp("")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
unique(data_full$id)
unique(data_full$id)
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
